"""
Company 서비스 - 비즈니스 로직 처리 모듈

이 모듈은 Company 테이블과 관련된 모든 비즈니스 로직을 처리합니다.
SQLAlchemy ORM을 사용하여 데이터베이스에서 company 정보를 조회하고,
필요한 데이터 변환 작업을 수행합니다.

주요 기능:
- company 테이블의 모든 데이터 조회 (ORM 사용)
- Company 모델 객체 반환
- 데이터베이스 세션 관리
"""

# 필요한 라이브러리들을 가져옵니다
from typing import List  # 타입 힌트용
from sqlalchemy.orm import Session  # SQLAlchemy 세션 타입
from app.config.database import get_db  # 데이터베이스 세션 생성 함수
from app.models.company import Company  # Company ORM 모델

# ============================================================================
# Company 서비스 클래스 정의
# ============================================================================
class CompanyService:
    """
    Company 관련 비즈니스 로직을 처리하는 서비스 클래스
    
    이 클래스는 데이터베이스에서 company 정보를 조회하고,
    비즈니스 규칙에 따라 데이터를 처리하는 역할을 담당합니다.
    
    SQLAlchemy ORM을 사용하여 데이터베이스와 상호작용합니다.
    """
    
    # ========================================================================
    # Company 데이터 조회 메서드
    # ========================================================================
    def get_all_companies(self) -> List[Company]:
        """
        company 테이블의 모든 데이터를 조회하는 메서드
        
        이 메서드는 다음과 같은 작업을 수행합니다:
        1. 데이터베이스 세션을 생성
        2. ORM을 사용하여 Company 모델로 데이터 조회
        3. Company 객체 리스트 반환
        4. 세션을 안전하게 닫기
        
        Returns:
            List[Company]: company 테이블의 모든 데이터를 Company 모델 객체로 변환한 리스트
                         각 Company 객체는 테이블의 한 행을 나타냅니다
                         
        Raises:
            Exception: 데이터베이스 조회 중 오류가 발생한 경우
        """
        try:
            # ================================================================
            # 데이터베이스 세션 생성
            # ================================================================
            # get_db()는 제너레이터 함수이므로 next()를 사용하여 세션을 가져옵니다
            # get_db()는 yield로 세션을 반환하므로 next()로 첫 번째 값을 추출합니다
            db = next(get_db())
            
            try:
                # ============================================================
                # ORM을 사용한 데이터 조회
                # ============================================================
                # db.query(Company).all()을 사용하여 모든 Company 데이터를 조회합니다
                # 이는 "SELECT * FROM company"와 동일한 결과를 제공하지만,
                # ORM을 통해 Company 모델 객체로 자동 변환됩니다
                companies = db.query(Company).all()
                
                # ============================================================
                # Company 객체 리스트 반환
                # ============================================================
                # companies는 이미 Company 모델 객체의 리스트입니다
                # 별도의 딕셔너리 변환 과정이 필요 없습니다
                return companies
                
            finally:
                # ============================================================
                # 데이터베이스 세션 정리
                # ============================================================
                # finally 블록은 try 블록이 성공하든 실패하든 항상 실행됩니다
                # 데이터베이스 세션을 안전하게 닫아 리소스 누수를 방지합니다
                db.close()
                
        except Exception as e:
            # ================================================================
            # 예외 처리
            # ================================================================
            # 데이터베이스 조회 중 발생한 모든 예외를 잡아서
            # 사용자 친화적인 에러 메시지와 함께 다시 발생시킵니다
            raise Exception(f"Company 테이블 조회 중 오류 발생: {str(e)}")

# ============================================================================
# 서비스 인스턴스 생성
# ============================================================================
# CompanyService 클래스의 인스턴스를 생성합니다
# 이 인스턴스는 다른 모듈에서 import하여 사용할 수 있습니다
company_service = CompanyService()
